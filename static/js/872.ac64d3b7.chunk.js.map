{"version":3,"file":"static/js/872.ac64d3b7.chunk.js","mappings":"uLAIA,MAg6BA,EAh6BqB,CACjBA,KAAM,eACNC,QAAS,y/KAwCTC,YAAa,+HACbC,YAAa,oBACbC,IAAK,07UAmbLC,QAAS,CACLC,QAAQ,EACRC,UAAW,qBACXC,MAAO,qGAKPC,KAAM,CAAC,CACXC,MAAO,cACPR,YAAa,mDACbS,KAAM,4vKAiNNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,gBACPR,YAAa,mDACbS,KAAM,kuBAwBNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,gBACPR,YAAa,mDACbS,KAAM,u/OAwGNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,cACPR,YAAa,mDACbS,KAAM,mdAqBNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,eACPR,YAAa,mDACbS,KAAM,gTAeNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,O","sources":["../../README.md"],"sourcesContent":["import * as component_1 from '@kne/current-lib_button-group';\nimport * as component_2 from 'antd';\nimport '@kne/current-lib_button-group/dist/index.css';\nimport '@kne/current-lib_button-group/dist/index.css';\nconst readmeConfig = {\n    name: `button-group`,\n    summary: `<p>@kne/button-group 是一个React按钮组件库，提供了一系列功能丰富的按钮组件，用于简化常见的按钮交互场景。该库专注于提供自适应布局、加载状态管理、确认操作和数据请求等功能，使开发者能够快速实现各种复杂的按钮交互需求。</p>\n<h3>主要组件</h3>\n<h4>ButtonGroup</h4>\n<p>自适应的按钮组组件，能够根据容器宽度自动调整显示的按钮数量。当容器宽度不足以显示所有按钮时，会自动将多余的按钮放入下拉菜单中，确保界面布局美观且功能完整。</p>\n<h4>LoadingButton</h4>\n<p>封装了加载状态的按钮组件，简化了异步操作的处理。通过内置的状态管理，在异步操作执行期间自动显示加载状态，提升用户体验。同时提供了useLoading hook，方便在其他组件中复用加载状态管理逻辑。</p>\n<h4>ConfirmButton</h4>\n<p>带有确认功能的按钮组件，支持弹窗确认和模态框确认两种模式。适用于需要用户二次确认的操作，如删除、提交等重要操作。同时提供了ConfirmLink和ConfirmText变体，以及withConfirm高阶组件，满足不同场景的确认需求。</p>\n<h4>FetchButton</h4>\n<p>集成了数据请求功能的按钮组件，基于@kne/react-fetch库实现。可以直接处理API请求，并在请求过程中自动管理加载状态，简化了数据交互的实现。</p>\n<h4>ButtonFooter</h4>\n<p>页面底部按钮区域组件，可以自动计算高度并设置CSS变量，方便页面布局和样式调整。</p>\n<h3>特性</h3>\n<ul>\n<li><strong>自适应布局</strong>：根据容器宽度自动调整按钮显示方式</li>\n<li><strong>加载状态管理</strong>：简化异步操作的加载状态处理</li>\n<li><strong>操作确认</strong>：提供多种确认模式，增强用户操作安全性</li>\n<li><strong>数据请求集成</strong>：简化按钮与后端API的交互</li>\n<li><strong>国际化支持</strong>：内置中英文语言包</li>\n<li><strong>高度可定制</strong>：组件提供丰富的配置选项</li>\n</ul>\n<h3>设计理念</h3>\n<p>该组件库的设计理念是通过封装常见的按钮交互模式，提供开箱即用的解决方案，同时保持足够的灵活性和可扩展性。主要体现在以下几个方面：</p>\n<ol>\n<li>\n<p><strong>关注点分离</strong>：每个组件专注于解决特定的问题，如ButtonGroup专注于布局，LoadingButton专注于状态管理。</p>\n</li>\n<li>\n<p><strong>组合优于继承</strong>：通过组合不同的功能组件，可以实现复杂的交互需求，如FetchButton就是LoadingButton与数据请求功能的组合。</p>\n</li>\n<li>\n<p><strong>声明式API</strong>：提供简洁明了的API，使开发者能够以声明式的方式描述UI和交互行为。</p>\n</li>\n<li>\n<p><strong>渐进式增强</strong>：基础组件可以独立使用，也可以与其他组件组合使用，实现更复杂的功能。</p>\n</li>\n<li>\n<p><strong>用户体验优先</strong>：注重细节，如自适应布局、加载状态反馈等，提升最终用户的使用体验。</p>\n</li>\n</ol>`,\n    description: `实现了一个按钮组,loading按钮,确认按钮和加载按钮.`,\n    packageName: `@kne/button-group`,\n    api: `<h3>ButtonGroup 组件</h3>\n<p>ButtonGroup是一个自适应的按钮组组件，能够根据容器宽度自动调整显示的按钮数量，并将多余的按钮放入下拉菜单中。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>按钮组的子元素，通常是一系列按钮</td>\n</tr>\n<tr>\n<td>className</td>\n<td>string</td>\n<td>-</td>\n<td>自定义类名</td>\n</tr>\n<tr>\n<td>style</td>\n<td>object</td>\n<td>-</td>\n<td>自定义样式</td>\n</tr>\n<tr>\n<td>moreText</td>\n<td>string</td>\n<td>\"更多\"</td>\n<td>更多按钮的文本</td>\n</tr>\n<tr>\n<td>buttonWidth</td>\n<td>number</td>\n<td>-</td>\n<td>按钮的固定宽度，如果不设置则自动计算</td>\n</tr>\n<tr>\n<td>buttonMargin</td>\n<td>number</td>\n<td>8</td>\n<td>按钮之间的间距</td>\n</tr>\n<tr>\n<td>dropdownProps</td>\n<td>object</td>\n<td>-</td>\n<td>传递给Dropdown组件的属性</td>\n</tr>\n<tr>\n<td>menuProps</td>\n<td>object</td>\n<td>-</td>\n<td>传递给Menu组件的属性</td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>function</td>\n<td>-</td>\n<td>菜单渲染父节点，默认渲染到body上</td>\n</tr>\n<tr>\n<td>onVisibleChange</td>\n<td>function</td>\n<td>-</td>\n<td>菜单显示状态改变时的回调函数</td>\n</tr>\n<tr>\n<td>onMoreClick</td>\n<td>function</td>\n<td>-</td>\n<td>点击更多按钮时的回调函数</td>\n</tr>\n<tr>\n<td>onMenuClick</td>\n<td>function</td>\n<td>-</td>\n<td>点击菜单项时的回调函数</td>\n</tr>\n<tr>\n<td>moreIcon</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>自定义更多按钮的图标</td>\n</tr>\n<tr>\n<td>moreButtonProps</td>\n<td>object</td>\n<td>-</td>\n<td>传递给更多按钮的属性</td>\n</tr>\n<tr>\n<td>forceRender</td>\n<td>boolean</td>\n<td>false</td>\n<td>是否强制渲染所有按钮，不进行自适应处理</td>\n</tr>\n</tbody>\n</table>\n<h3>LoadingButton 组件</h3>\n<p>LoadingButton是一个封装了加载状态的按钮组件，简化了异步操作的处理。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onClick</td>\n<td>function</td>\n<td>-</td>\n<td>点击按钮时的回调函数，可以返回Promise</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>boolean</td>\n<td>false</td>\n<td>是否显示加载状态</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td>是否禁用按钮</td>\n</tr>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>按钮内容</td>\n</tr>\n<tr>\n<td>...rest</td>\n<td>-</td>\n<td>-</td>\n<td>其他传递给Button组件的属性</td>\n</tr>\n</tbody>\n</table>\n<h3>useLoading Hook</h3>\n<p>useLoading是一个用于管理异步操作加载状态的Hook。</p>\n<h4>参数与返回值</h4>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>不接受参数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>loading</td>\n<td>boolean</td>\n<td>当前加载状态</td>\n</tr>\n<tr>\n<td>withLoading</td>\n<td>function</td>\n<td>包装异步函数，自动管理加载状态</td>\n</tr>\n</tbody>\n</table>\n<h3>ConfirmButton 组件</h3>\n<p>ConfirmButton是一个带有确认功能的按钮组件，支持弹窗确认和模态框确认两种模式。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>按钮内容</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>function</td>\n<td>-</td>\n<td>确认后的回调函数</td>\n</tr>\n<tr>\n<td>title</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td>确认框标题</td>\n</tr>\n<tr>\n<td>content</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td>确认框内容</td>\n</tr>\n<tr>\n<td>okText</td>\n<td>string</td>\n<td>\"确定\"</td>\n<td>确认按钮文字</td>\n</tr>\n<tr>\n<td>cancelText</td>\n<td>string</td>\n<td>\"取消\"</td>\n<td>取消按钮文字</td>\n</tr>\n<tr>\n<td>type</td>\n<td>\"popconfirm\" | \"modal\"</td>\n<td>\"popconfirm\"</td>\n<td>确认框类型，支持气泡确认框和模态框</td>\n</tr>\n<tr>\n<td>modalProps</td>\n<td>object</td>\n<td>-</td>\n<td>传递给Modal组件的属性（当type为\"modal\"时有效）</td>\n</tr>\n<tr>\n<td>popconfirmProps</td>\n<td>object</td>\n<td>-</td>\n<td>传递给Popconfirm组件的属性（当type为\"popconfirm\"时有效）</td>\n</tr>\n<tr>\n<td>...rest</td>\n<td>-</td>\n<td>-</td>\n<td>其他传递给Button组件的属性</td>\n</tr>\n</tbody>\n</table>\n<h3>ConfirmLink 组件</h3>\n<p>ConfirmLink是ConfirmButton的变体，渲染为链接样式。</p>\n<h4>属性</h4>\n<p>与ConfirmButton相同，但默认渲染为链接样式。</p>\n<h3>ConfirmText 组件</h3>\n<p>ConfirmText是ConfirmButton的变体，渲染为纯文本样式。</p>\n<h4>属性</h4>\n<p>与ConfirmButton相同，但默认渲染为纯文本样式。</p>\n<h3>withConfirm 高阶组件</h3>\n<p>withConfirm是一个高阶组件，用于为任意组件添加确认功能。</p>\n<h4>参数</h4>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>options</td>\n<td>object</td>\n<td>-</td>\n<td>确认框配置选项</td>\n</tr>\n<tr>\n<td>options.title</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td>确认框标题</td>\n</tr>\n<tr>\n<td>options.content</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td>确认框内容</td>\n</tr>\n<tr>\n<td>options.okText</td>\n<td>string</td>\n<td>\"确定\"</td>\n<td>确认按钮文字</td>\n</tr>\n<tr>\n<td>options.cancelText</td>\n<td>string</td>\n<td>\"取消\"</td>\n<td>取消按钮文字</td>\n</tr>\n<tr>\n<td>options.type</td>\n<td>\"popconfirm\" | \"modal\"</td>\n<td>\"popconfirm\"</td>\n<td>确认框类型</td>\n</tr>\n<tr>\n<td>options.modalProps</td>\n<td>object</td>\n<td>-</td>\n<td>传递给Modal组件的属性</td>\n</tr>\n<tr>\n<td>options.popconfirmProps</td>\n<td>object</td>\n<td>-</td>\n<td>传递给Popconfirm组件的属性</td>\n</tr>\n</tbody>\n</table>\n<h3>FetchButton 组件</h3>\n<p>FetchButton是一个集成了数据请求功能的按钮组件，基于@kne/react-fetch库实现。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>按钮内容</td>\n</tr>\n<tr>\n<td>api</td>\n<td>string | object | function</td>\n<td>-</td>\n<td>请求API，可以是字符串、对象或函数</td>\n</tr>\n<tr>\n<td>params</td>\n<td>object</td>\n<td>-</td>\n<td>请求参数</td>\n</tr>\n<tr>\n<td>onSuccess</td>\n<td>function</td>\n<td>-</td>\n<td>请求成功回调</td>\n</tr>\n<tr>\n<td>onError</td>\n<td>function</td>\n<td>-</td>\n<td>请求失败回调</td>\n</tr>\n<tr>\n<td>beforeFetch</td>\n<td>function</td>\n<td>-</td>\n<td>请求前处理函数，返回false可阻止请求</td>\n</tr>\n<tr>\n<td>afterFetch</td>\n<td>function</td>\n<td>-</td>\n<td>请求后处理函数</td>\n</tr>\n<tr>\n<td>fetchOptions</td>\n<td>object</td>\n<td>-</td>\n<td>传递给fetch函数的选项</td>\n</tr>\n<tr>\n<td>...rest</td>\n<td>-</td>\n<td>-</td>\n<td>其他传递给LoadingButton组件的属性</td>\n</tr>\n</tbody>\n</table>\n<h3>ButtonFooter 组件</h3>\n<p>ButtonFooter是一个页面底部按钮区域组件，可以自动计算高度并设置CSS变量。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>按钮区域内容</td>\n</tr>\n<tr>\n<td>className</td>\n<td>string</td>\n<td>-</td>\n<td>自定义类名</td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: false,\n        className: `button_group_e0271`,\n        style: `.button_group_e0271 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `ButtonGroup`,\n    description: `这里填写示例说明`,\n    code: `const { default: ButtonGroup, ConfirmButton } = _ButtonGroup;\nconst { Flex, Button } = antd;\nconst { useState, useEffect } = React;\n\nconst Example = () => {\n  const [width, setWidth] = useState(200);\n  return (\n    <Flex gap={8}>\n      <div style={{ width: \\`\\${width}px\\` }}>\n        <ButtonGroup\n          list={[\n            {\n              type: 'primary',\n              children: '操作1'\n            },\n            {\n              type: 'primary',\n              children: '操作1-1',\n              hidden: true\n            },\n            {\n              children: '操作2',\n              tooltipProps: {\n                title: '操作2'\n              }\n            },\n            {\n              children: '操作3',\n              disabled: true,\n              tooltipProps: {\n                title: '操作3==='\n              }\n            },\n            {\n              children: '操作4',\n              message: '确定要执行操作吗？',\n              disabled: true\n            },\n            {\n              children: '操作5',\n              message: '确定要执行操作吗？'\n            }\n          ]}\n          more=\"...\"\n        />\n      </div>\n      <Flex gap={8}>\n        <Button\n          onClick={() => {\n            setWidth(width => {\n              return width + 20;\n            });\n          }}>\n          增加容器宽度\n        </Button>\n        <Button\n          onClick={() => {\n            setWidth(width => {\n              return width - 20;\n            });\n          }}>\n          减少容器宽度\n        </Button>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst CompactExample = () => {\n  const [width, setWidth] = useState(200);\n  return (\n    <Flex gap={8}>\n      <div style={{ width: \\`\\${width}px\\` }}>\n        <ButtonGroup\n          compact\n          list={[\n            {\n              type: 'primary',\n              children: '操作1'\n            },\n            {\n              children: '操作2'\n            },\n            {\n              children: '操作3',\n              hidden: true\n            },\n            {\n              children: '操作4',\n              message: '确定要执行操作吗？'\n            }\n          ]}\n        />\n      </div>\n      <Flex gap={8}>\n        <Button\n          onClick={() => {\n            setWidth(width => {\n              return width + 20;\n            });\n          }}>\n          增加容器宽度\n        </Button>\n        <Button\n          onClick={() => {\n            setWidth(width => {\n              return width - 20;\n            });\n          }}>\n          减少容器宽度\n        </Button>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst LoadChildren = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n  }, []);\n  if (loading) {\n    return null;\n  }\n  return children({\n    onClick: () => {\n      console.log('加载完成');\n    }\n  });\n};\nconst FunctionProps = () => {\n  const [width, setWidth] = useState(200);\n  return (\n    <Flex gap={8}>\n      <div style={{ width: \\`\\${width}px\\` }}>\n        <ButtonGroup itemClassName=\"btn-no-padding\"\n          moreType=\"link\"\n          list={[\n            props => {\n              return (\n                <Button {...props} type=\"link\">\n                  操作1\n                </Button>\n              );\n            },\n            props => {\n              return <Button {...props} type=\"link\">操作2</Button>;\n            },\n            props => {\n              return <Button {...props} type=\"link\">操作3</Button>;\n            },\n            props => {\n              return (\n                <LoadChildren key={props.key}>\n                  {({ onClick }) => {\n                    return (\n                      <ConfirmButton {...props} type=\"link\" isModal={props.isDropdown} message=\"确定要执行操作吗？\" onClick={onClick}>\n                        操作4\n                      </ConfirmButton>\n                    );\n                  }}\n                </LoadChildren>\n              );\n            }\n          ]}\n        />\n      </div>\n      <Flex gap={8}>\n        <Button\n          onClick={() => {\n            setWidth(width => {\n              return width + 20;\n            });\n          }}>\n          增加容器宽度\n        </Button>\n        <Button\n          onClick={() => {\n            setWidth(width => {\n              return width - 20;\n            });\n          }}>\n          减少容器宽度\n        </Button>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst BaseExample = () => {\n  return (\n    <div>\n      <Flex vertical gap={8}>\n        <div>base:</div>\n        <Example />\n        <div>compact:</div>\n        <CompactExample />\n        <div>function props:</div>\n        <FunctionProps />\n      </Flex>\n    </div>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ButtonGroup\",\n    packageName: \"@kne/current-lib_button-group\",\n    importStatement: \"import * as _ButtonGroup from \\\"@kne/button-group\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `LoadingButton`,\n    description: `这里填写示例说明`,\n    code: `const { LoadingButton } = _ButtonGroup;\nconst { Space, App } = antd;\nconst BaseExample = () => {\n  const { message } = App.useApp();\n  const clickHandler = () => {\n    message.success('点击按钮1s后完成加载');\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        message.success('完成');\n        resolve();\n      }, 1000);\n    });\n  };\n  return (<Space wrap>\n    <LoadingButton onClick={clickHandler}>按钮</LoadingButton>\n    <LoadingButton onClick={clickHandler}>\n      {(isLoading) => (isLoading ? '正在加载中...' : '切换加载文案')}\n    </LoadingButton>\n  </Space>);\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ButtonGroup\",\n    packageName: \"@kne/current-lib_button-group\",\n    importStatement: \"import * as _ButtonGroup from \\\"@kne/button-group\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `ConfirmButton`,\n    description: `这里填写示例说明`,\n    code: `const { ConfirmButton, ConfirmLink, ConfirmText } = _ButtonGroup;\nconst { Flex } = antd;\nconst BaseExample = () => {\n  return <Flex gap={8} vertical>\n    <Flex gap={8}>\n      <ConfirmButton message=\"确定要删除吗?\" onClick={() => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            console.log('确定删除');\n            resolve();\n          }, 500);\n        });\n      }}>删除</ConfirmButton>\n\n      <ConfirmButton disabled message=\"确定要删除吗?\" onClick={() => {\n        console.log('确定删除');\n      }}>删除</ConfirmButton>\n\n      <ConfirmButton title=\"确定要删除吗?\"\n                     message=\"删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除\"\n                     onClick={() => {\n                       return new Promise((resolve) => {\n                         setTimeout(() => {\n                           console.log('确定删除');\n                           resolve();\n                         }, 500);\n                       });\n                     }}>删除</ConfirmButton>\n\n      <ConfirmButton isDelete message=\"确定要删除吗?\" onClick={() => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            console.log('确定删除');\n            resolve();\n          }, 500);\n        });\n      }}>删除</ConfirmButton>\n\n      <ConfirmButton isDelete title=\"确定要删除吗?\"\n                     message=\"删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除\"\n                     onClick={() => {\n                       return new Promise((resolve) => {\n                         setTimeout(() => {\n                           console.log('确定删除');\n                           resolve();\n                         }, 500);\n                       });\n                     }}>删除</ConfirmButton>\n    </Flex>\n    <Flex gap={8}>\n      <ConfirmButton isModal message=\"确定要删除吗?\" onClick={() => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            console.log('确定删除');\n            resolve();\n          }, 500);\n        });\n      }}>删除</ConfirmButton>\n\n      <ConfirmButton isModal title=\"确定要删除吗?\"\n                     message=\"删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除\"\n                     onClick={() => {\n                       return new Promise((resolve) => {\n                         setTimeout(() => {\n                           console.log('确定删除');\n                           resolve();\n                         }, 500);\n                       });\n                     }}>删除</ConfirmButton>\n\n      <ConfirmButton isModal isDelete message=\"确定要删除吗?\" onClick={() => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            console.log('确定删除');\n            resolve();\n          }, 500);\n        });\n      }}>删除</ConfirmButton>\n\n      <ConfirmButton isModal isDelete title=\"确定要删除吗?\"\n                     message=\"删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除\"\n                     onClick={() => {\n                       return new Promise((resolve) => {\n                         setTimeout(() => {\n                           console.log('确定删除');\n                           resolve();\n                         }, 500);\n                       });\n                     }}>删除</ConfirmButton>\n    </Flex>\n    <Flex gap={8}>\n      <ConfirmLink onClick={() => {\n        console.log('删除');\n      }}>删除</ConfirmLink>\n      <ConfirmText onClick={() => {\n        console.log('删除');\n      }}>删除</ConfirmText>\n    </Flex>\n  </Flex>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ButtonGroup\",\n    packageName: \"@kne/current-lib_button-group\",\n    importStatement: \"import * as _ButtonGroup from \\\"@kne/button-group\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `FetchButton`,\n    description: `这里填写示例说明`,\n    code: `const { FetchButton } = _ButtonGroup;\n\nconst BaseExample = () => {\n  return <div>\n    <FetchButton api={{\n      loader: async () => {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            resolve({ data: 'xxxxx' });\n          }, 1000);\n        });\n      }\n    }} onClick={(data) => {\n      console.log(data);\n    }}>点击加载数据</FetchButton>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ButtonGroup\",\n    packageName: \"@kne/current-lib_button-group\",\n    importStatement: \"import * as _ButtonGroup from \\\"@kne/button-group\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `ButtonFooter`,\n    description: `这里填写示例说明`,\n    code: `const { ButtonFooter } = _ButtonGroup;\nconst { Flex, Button } = antd;\nconst BaseExample = () => {\n  return (\n    <ButtonFooter>\n      <Flex justify=\"space-between\" align=\"middle\">\n        <Button>按钮</Button>\n      </Flex>\n    </ButtonFooter>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ButtonGroup\",\n    packageName: \"@kne/current-lib_button-group\",\n    importStatement: \"import * as _ButtonGroup from \\\"@kne/button-group\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component"],"sourceRoot":""}