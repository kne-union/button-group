{"version":3,"file":"static/js/872.de2ef8aa.chunk.js","mappings":"uLAGA,MAq0BA,EAr0BqB,CACjBA,KAAM,eACNC,QAAS,6qHAqCTC,YAAa,+HACbC,YAAa,oBACbC,IAAK,89SAyZLC,QAAS,CACLC,QAAQ,EACRC,UAAW,qBACXC,MAAO,qGAKPC,KAAM,CAAC,CACXC,MAAO,cACPR,YAAa,mDACbS,KAAM,s0IA+KNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,gBACPR,YAAa,mDACbS,KAAM,kuBAwBNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,gBACPR,YAAa,mDACbS,KAAM,u/OAwGNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,cACPR,YAAa,mDACbS,KAAM,mdAqBNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,O","sources":["../../README.md"],"sourcesContent":["import * as component_1 from '@kne/current-lib_button-group';\nimport * as component_2 from 'antd';\nimport '@kne/current-lib_button-group/dist/index.css';\nconst readmeConfig = {\n    name: `button-group`,\n    summary: `<p>这是一个基于React和Ant Design的按钮组件库，提供了一系列功能强大且易用的按钮组件。该库主要包含以下组件：</p>\n<h3>主要组件</h3>\n<h4>ButtonGroup</h4>\n<p>一个智能的按钮组组件，能够根据容器宽度自动调整显示的按钮数量。当空间不足时，会自动将多余的按钮收纳到下拉菜单中，确保良好的用户体验和界面布局。</p>\n<h4>LoadingButton</h4>\n<p>一个封装了加载状态管理的按钮组件。它提供了一个<code>useLoading</code> hook，可以轻松处理异步操作时的加载状态，使按钮在执行异步操作时自动显示加载状态。</p>\n<h4>ConfirmButton</h4>\n<p>一个带有确认机制的按钮组件，支持两种确认模式：</p>\n<ul>\n<li>弹窗确认（Popconfirm）</li>\n<li>模态框确认（Modal）</li>\n</ul>\n<p>同时提供了以下变体：</p>\n<ul>\n<li>ConfirmLink：确认链接组件</li>\n<li>ConfirmText：确认文本组件</li>\n<li>withConfirm：用于为其他组件添加确认功能的高阶组件（HOC）</li>\n</ul>\n<h4>FetchButton</h4>\n<p>一个集成了数据请求功能的按钮组件，基于<code>@kne/react-fetch</code>库实现。它可以直接处理API请求，并在请求过程中自动管理加载状态。</p>\n<h3>特性</h3>\n<ul>\n<li>组件化：每个组件都是独立的，可以单独使用</li>\n<li>国际化：支持多语言（中文、英文）</li>\n<li>类型安全：使用PropTypes进行类型检查</li>\n<li>自适应：ButtonGroup组件能够根据容器宽度自动调整</li>\n<li>可扩展：提供了HOC和Hook方便进行功能扩展</li>\n<li>用户体验：内置了加载状态、确认机制等常用交互功能</li>\n</ul>\n<h3>设计理念</h3>\n<p>该组件库的设计理念是提供一系列开箱即用的按钮组件，同时保持足够的灵活性和可扩展性。通过合理的抽象和封装，使开发者能够轻松处理常见的按钮交互场景，如：</p>\n<ul>\n<li>异步操作的加载状态</li>\n<li>危险操作的确认机制</li>\n<li>数据请求的状态管理</li>\n<li>按钮组的自适应布局</li>\n</ul>`,\n    description: `实现了一个按钮组,loading按钮,确认按钮和加载按钮.`,\n    packageName: `@kne/button-group`,\n    api: `<h3>API 文档</h3>\n<h3>ButtonGroup</h3>\n<p>自适应的按钮组组件，能够根据容器宽度自动调整显示的按钮数量。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>按钮组的子元素，通常是一系列按钮</td>\n</tr>\n<tr>\n<td>moreText</td>\n<td>string</td>\n<td>\"更多\"</td>\n<td>更多按钮的文本</td>\n</tr>\n<tr>\n<td>className</td>\n<td>string</td>\n<td>-</td>\n<td>自定义类名</td>\n</tr>\n<tr>\n<td>style</td>\n<td>object</td>\n<td>-</td>\n<td>自定义样式</td>\n</tr>\n<tr>\n<td>dropdownProps</td>\n<td>object</td>\n<td>-</td>\n<td>传递给Dropdown组件的属性</td>\n</tr>\n<tr>\n<td>menuProps</td>\n<td>object</td>\n<td>-</td>\n<td>传递给Menu组件的属性</td>\n</tr>\n<tr>\n<td>buttonProps</td>\n<td>object</td>\n<td>-</td>\n<td>传递给更多按钮的属性</td>\n</tr>\n<tr>\n<td>maxWidth</td>\n<td>number</td>\n<td>-</td>\n<td>最大宽度，超过此宽度的按钮将被放入下拉菜单</td>\n</tr>\n<tr>\n<td>minWidth</td>\n<td>number</td>\n<td>-</td>\n<td>最小宽度，低于此宽度的按钮将被放入下拉菜单</td>\n</tr>\n<tr>\n<td>gap</td>\n<td>number</td>\n<td>8</td>\n<td>按钮之间的间距</td>\n</tr>\n<tr>\n<td>moreButtonWidth</td>\n<td>number</td>\n<td>80</td>\n<td>更多按钮的宽度</td>\n</tr>\n<tr>\n<td>getContainer</td>\n<td>function</td>\n<td>-</td>\n<td>获取容器元素的函数</td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>function</td>\n<td>-</td>\n<td>获取弹出层容器的函数</td>\n</tr>\n<tr>\n<td>onVisibleChange</td>\n<td>function</td>\n<td>-</td>\n<td>下拉菜单可见性变化时的回调函数</td>\n</tr>\n</tbody>\n</table>\n<h4>示例</h4>\n<pre><code class=\"language-jsx\">import ButtonGroup from '@kne/button-group';\nimport { Button } from 'antd';\n\nconst Example = () =&gt; (\n  &lt;ButtonGroup&gt;\n    &lt;Button&gt;按钮1&lt;/Button&gt;\n    &lt;Button&gt;按钮2&lt;/Button&gt;\n    &lt;Button&gt;按钮3&lt;/Button&gt;\n    &lt;Button&gt;按钮4&lt;/Button&gt;\n  &lt;/ButtonGroup&gt;\n);\n</code></pre>\n<h3>LoadingButton</h3>\n<p>封装了加载状态的按钮组件。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>loading</td>\n<td>boolean</td>\n<td>false</td>\n<td>是否显示加载状态</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>function</td>\n<td>-</td>\n<td>点击事件处理函数，支持异步函数</td>\n</tr>\n<tr>\n<td>...rest</td>\n<td>-</td>\n<td>-</td>\n<td>其他属性将传递给Ant Design的Button组件</td>\n</tr>\n</tbody>\n</table>\n<h4>useLoading Hook</h4>\n<p>用于管理异步操作的加载状态。</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>loading</td>\n<td>boolean</td>\n<td>当前的加载状态</td>\n</tr>\n<tr>\n<td>withLoading</td>\n<td>function</td>\n<td>包装异步函数，自动管理加载状态的高阶函数</td>\n</tr>\n</tbody>\n</table>\n<h4>示例</h4>\n<pre><code class=\"language-jsx\">// 使用LoadingButton组件\nimport { LoadingButton } from '@kne/button-group';\n\nconst Example = () =&gt; (\n  &lt;LoadingButton \n    onClick={async () =&gt; {\n      await someAsyncOperation();\n    }}\n  &gt;\n    提交\n  &lt;/LoadingButton&gt;\n);\n\n// 使用useLoading hook\nimport { useLoading } from '@kne/button-group';\nimport { Button } from 'antd';\n\nconst Example = () =&gt; {\n  const { loading, withLoading } = useLoading();\n  \n  return (\n    &lt;Button \n      loading={loading}\n      onClick={withLoading(async () =&gt; {\n        await someAsyncOperation();\n      })}\n    &gt;\n      提交\n    &lt;/Button&gt;\n  );\n};\n</code></pre>\n<h3>ConfirmButton</h3>\n<p>带有确认功能的按钮组件。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>string</td>\n<td>'popconfirm'</td>\n<td>确认类型，可选值：'popconfirm'(弹窗确认)、'modal'(模态框确认)</td>\n</tr>\n<tr>\n<td>title</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td>确认提示的标题</td>\n</tr>\n<tr>\n<td>okText</td>\n<td>string</td>\n<td>'确定'</td>\n<td>确认按钮的文本</td>\n</tr>\n<tr>\n<td>cancelText</td>\n<td>string</td>\n<td>'取消'</td>\n<td>取消按钮的文本</td>\n</tr>\n<tr>\n<td>onConfirm</td>\n<td>function</td>\n<td>-</td>\n<td>确认操作的回调函数</td>\n</tr>\n<tr>\n<td>onCancel</td>\n<td>function</td>\n<td>-</td>\n<td>取消操作的回调函数</td>\n</tr>\n<tr>\n<td>modalProps</td>\n<td>object</td>\n<td>-</td>\n<td>当type为'modal'时，传递给Modal组件的属性</td>\n</tr>\n<tr>\n<td>popconfirmProps</td>\n<td>object</td>\n<td>-</td>\n<td>当type为'popconfirm'时，传递给Popconfirm组件的属性</td>\n</tr>\n<tr>\n<td>...rest</td>\n<td>-</td>\n<td>-</td>\n<td>其他属性将传递给Button组件</td>\n</tr>\n</tbody>\n</table>\n<h4>ConfirmLink</h4>\n<p>带有确认功能的链接组件。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>与ConfirmButton相同</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>ConfirmText</h4>\n<p>带有确认功能的文本组件。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>与ConfirmButton相同</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>withConfirm HOC</h4>\n<p>用于为组件添加确认功能的高阶组件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>options</td>\n<td>object</td>\n<td>-</td>\n<td>确认选项，与ConfirmButton的属性相同</td>\n</tr>\n</tbody>\n</table>\n<h4>示例</h4>\n<pre><code class=\"language-jsx\">// 使用ConfirmButton\nimport { ConfirmButton } from '@kne/button-group';\n\nconst Example = () =&gt; (\n  &lt;ConfirmButton \n    type=\"popconfirm\"\n    title=\"确定要删除吗？\"\n    onConfirm={() =&gt; console.log('已确认')}\n  &gt;\n    删除\n  &lt;/ConfirmButton&gt;\n);\n\n// 使用withConfirm HOC\nimport { withConfirm } from '@kne/button-group';\nimport { Button } from 'antd';\n\nconst ConfirmDeleteButton = withConfirm({\n  title: '确定要删除吗？',\n  type: 'modal'\n})(Button);\n\nconst Example = () =&gt; (\n  &lt;ConfirmDeleteButton onClick={() =&gt; console.log('已确认')}&gt;\n    删除\n  &lt;/ConfirmDeleteButton&gt;\n);\n</code></pre>\n<h3>FetchButton</h3>\n<p>集成了数据请求功能的按钮组件。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>api</td>\n<td>object</td>\n<td>-</td>\n<td>API配置对象，遵循@kne/react-fetch的API格式</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>function</td>\n<td>-</td>\n<td>请求成功后的回调函数，接收{data}作为参数</td>\n</tr>\n<tr>\n<td>...rest</td>\n<td>-</td>\n<td>-</td>\n<td>其他属性将传递给LoadingButton组件</td>\n</tr>\n</tbody>\n</table>\n<h4>示例</h4>\n<pre><code class=\"language-jsx\">import { FetchButton } from '@kne/button-group';\n\nconst Example = () =&gt; (\n  &lt;FetchButton\n    api={{\n      url: '/api/example',\n      method: 'POST',\n      data: { id: 1 }\n    }}\n    onClick={({ data }) =&gt; console.log('请求成功', data)}\n  &gt;\n    提交\n  &lt;/FetchButton&gt;\n);\n</code></pre>`,\n    example: {\n        isFull: false,\n        className: `button_group_e0271`,\n        style: `.button_group_e0271 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `ButtonGroup`,\n    description: `这里填写示例说明`,\n    code: `const { default: ButtonGroup, ConfirmButton } = _ButtonGroup;\nconst { Flex, Button } = antd;\nconst { useState, useEffect } = React;\n\nconst Example = () => {\n  const [width, setWidth] = useState(200);\n  return (<Flex gap={8}>\n    <div style={{ width: \\`\\${width}px\\` }}>\n      <ButtonGroup\n        list={[{\n          type: 'primary', children: '操作1'\n        }, {\n          children: '操作2',\n          tooltipProps: {\n            title: '操作2'\n          }\n        }, {\n          children: '操作3', disabled: true,\n          tooltipProps: {\n            title: '操作3==='\n          }\n        }, {\n          children: '操作3', message: '确定要执行操作吗？', disabled: true\n        }, {\n          children: '操作3', message: '确定要执行操作吗？'\n        }]}\n      />\n    </div>\n    <Flex gap={8}>\n      <Button\n        onClick={() => {\n          setWidth((width) => {\n            return width + 20;\n          });\n        }}\n      >\n        增加容器宽度\n      </Button>\n      <Button\n        onClick={() => {\n          setWidth((width) => {\n            return width - 20;\n          });\n        }}\n      >\n        减少容器宽度\n      </Button>\n    </Flex>\n  </Flex>);\n};\n\nconst CompactExample = () => {\n  const [width, setWidth] = useState(200);\n  return (<Flex gap={8}>\n    <div style={{ width: \\`\\${width}px\\` }}>\n      <ButtonGroup\n        compact\n        list={[{\n          type: 'primary', children: '操作1'\n        }, {\n          children: '操作2'\n        }, {\n          children: '操作3'\n        }, {\n          children: '操作3', message: '确定要执行操作吗？'\n        }]}\n      />\n    </div>\n    <Flex gap={8}>\n      <Button\n        onClick={() => {\n          setWidth((width) => {\n            return width + 20;\n          });\n        }}\n      >\n        增加容器宽度\n      </Button>\n      <Button\n        onClick={() => {\n          setWidth((width) => {\n            return width - 20;\n          });\n        }}\n      >\n        减少容器宽度\n      </Button>\n    </Flex>\n  </Flex>);\n};\n\nconst LoadChildren = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n  }, []);\n  if (loading) {\n    return null;\n  }\n  return children({\n    onClick: () => {\n      console.log('加载完成');\n    }\n  });\n};\nconst FunctionProps = () => {\n  const [width, setWidth] = useState(200);\n  return (<Flex gap={8}>\n    <div style={{ width: \\`\\${width}px\\` }}>\n      <ButtonGroup\n        list={[(props) => {\n          return (<Button {...props} type=\"primary\">\n            操作1\n          </Button>);\n        }, (props) => {\n          return <Button {...props}>操作2</Button>;\n        }, (props) => {\n          return <Button {...props}>操作3</Button>;\n        }, (props) => {\n          return (<LoadChildren key={props.key}>\n            {({ onClick }) => {\n              return (<ConfirmButton\n                {...props}\n                isModal={props.isDropdown}\n                message=\"确定要执行操作吗？\"\n                onClick={onClick}\n              >\n                操作4\n              </ConfirmButton>);\n            }}\n          </LoadChildren>);\n        }]}\n      />\n    </div>\n    <Flex gap={8}>\n      <Button\n        onClick={() => {\n          setWidth((width) => {\n            return width + 20;\n          });\n        }}\n      >\n        增加容器宽度\n      </Button>\n      <Button\n        onClick={() => {\n          setWidth((width) => {\n            return width - 20;\n          });\n        }}\n      >\n        减少容器宽度\n      </Button>\n    </Flex>\n  </Flex>);\n};\n\nconst BaseExample = () => {\n  return <div>\n    <Flex vertical gap={8}>\n      <div>base:</div>\n      <Example />\n      <div>compact:</div>\n      <CompactExample />\n      <div>function props:</div>\n      <FunctionProps />\n    </Flex>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ButtonGroup\",\n    packageName: \"@kne/current-lib_button-group\",\n    importStatement: \"import * as _ButtonGroup from \\\"@kne/button-group\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `LoadingButton`,\n    description: `这里填写示例说明`,\n    code: `const { LoadingButton } = _ButtonGroup;\nconst { Space, App } = antd;\nconst BaseExample = () => {\n  const { message } = App.useApp();\n  const clickHandler = () => {\n    message.success('点击按钮1s后完成加载');\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        message.success('完成');\n        resolve();\n      }, 1000);\n    });\n  };\n  return (<Space wrap>\n    <LoadingButton onClick={clickHandler}>按钮</LoadingButton>\n    <LoadingButton onClick={clickHandler}>\n      {(isLoading) => (isLoading ? '正在加载中...' : '切换加载文案')}\n    </LoadingButton>\n  </Space>);\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ButtonGroup\",\n    packageName: \"@kne/current-lib_button-group\",\n    importStatement: \"import * as _ButtonGroup from \\\"@kne/button-group\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `ConfirmButton`,\n    description: `这里填写示例说明`,\n    code: `const { ConfirmButton, ConfirmLink, ConfirmText } = _ButtonGroup;\nconst { Flex } = antd;\nconst BaseExample = () => {\n  return <Flex gap={8} vertical>\n    <Flex gap={8}>\n      <ConfirmButton message=\"确定要删除吗?\" onClick={() => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            console.log('确定删除');\n            resolve();\n          }, 500);\n        });\n      }}>删除</ConfirmButton>\n\n      <ConfirmButton disabled message=\"确定要删除吗?\" onClick={() => {\n        console.log('确定删除');\n      }}>删除</ConfirmButton>\n\n      <ConfirmButton title=\"确定要删除吗?\"\n                     message=\"删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除\"\n                     onClick={() => {\n                       return new Promise((resolve) => {\n                         setTimeout(() => {\n                           console.log('确定删除');\n                           resolve();\n                         }, 500);\n                       });\n                     }}>删除</ConfirmButton>\n\n      <ConfirmButton isDelete message=\"确定要删除吗?\" onClick={() => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            console.log('确定删除');\n            resolve();\n          }, 500);\n        });\n      }}>删除</ConfirmButton>\n\n      <ConfirmButton isDelete title=\"确定要删除吗?\"\n                     message=\"删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除\"\n                     onClick={() => {\n                       return new Promise((resolve) => {\n                         setTimeout(() => {\n                           console.log('确定删除');\n                           resolve();\n                         }, 500);\n                       });\n                     }}>删除</ConfirmButton>\n    </Flex>\n    <Flex gap={8}>\n      <ConfirmButton isModal message=\"确定要删除吗?\" onClick={() => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            console.log('确定删除');\n            resolve();\n          }, 500);\n        });\n      }}>删除</ConfirmButton>\n\n      <ConfirmButton isModal title=\"确定要删除吗?\"\n                     message=\"删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除\"\n                     onClick={() => {\n                       return new Promise((resolve) => {\n                         setTimeout(() => {\n                           console.log('确定删除');\n                           resolve();\n                         }, 500);\n                       });\n                     }}>删除</ConfirmButton>\n\n      <ConfirmButton isModal isDelete message=\"确定要删除吗?\" onClick={() => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            console.log('确定删除');\n            resolve();\n          }, 500);\n        });\n      }}>删除</ConfirmButton>\n\n      <ConfirmButton isModal isDelete title=\"确定要删除吗?\"\n                     message=\"删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除删除\"\n                     onClick={() => {\n                       return new Promise((resolve) => {\n                         setTimeout(() => {\n                           console.log('确定删除');\n                           resolve();\n                         }, 500);\n                       });\n                     }}>删除</ConfirmButton>\n    </Flex>\n    <Flex gap={8}>\n      <ConfirmLink onClick={() => {\n        console.log('删除');\n      }}>删除</ConfirmLink>\n      <ConfirmText onClick={() => {\n        console.log('删除');\n      }}>删除</ConfirmText>\n    </Flex>\n  </Flex>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ButtonGroup\",\n    packageName: \"@kne/current-lib_button-group\",\n    importStatement: \"import * as _ButtonGroup from \\\"@kne/button-group\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `FetchButton`,\n    description: `这里填写示例说明`,\n    code: `const { FetchButton } = _ButtonGroup;\n\nconst BaseExample = () => {\n  return <div>\n    <FetchButton api={{\n      loader: async () => {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            resolve({ data: 'xxxxx' });\n          }, 1000);\n        });\n      }\n    }} onClick={(data) => {\n      console.log(data);\n    }}>点击加载数据</FetchButton>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ButtonGroup\",\n    packageName: \"@kne/current-lib_button-group\",\n    importStatement: \"import * as _ButtonGroup from \\\"@kne/button-group\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component"],"sourceRoot":""}